动态绑定
绑定  将一个方法调用同一个方法主体连接到一起 就称为绑定  若在程序运行前执行绑定  则称为前期绑定  实际上任何程序语言都是不可能做到的

java中的动态绑定 就是在运行期 根据传来的对象来觉得调用那个类的那个方法比如  tune(Instrument i) 编译器不知道调用那个instrument

java中所有的方法都是动态绑定的  除非方法被设置成final  final 方法另外的作用就是接触动态绑定
从而可以生成效率更高的代码   所有的后期绑定 语言中必须提供一种机制 就是可以根据传递来的对象判断调用那个类的那个方法
因为此时编译器 仍然不能确定 要调用的是那个类

java语言中的思想是对象消息机制  即吧消息发送给对象

Shape s = new Circle();  这也是一个后期绑定例子
为什么要用抽象类

java编程思想这么说  如果一个类的对象没有任何意义  他的存在只是为了给他的子类 来提供接口  那么就可以使用抽象类 也可以让所有的方法出错
但是这样就把 错误放到 运行期来显示出来  我们希望的是在编译器就报错  因此可以将类或者方法  变为抽象类

抽象方法必须在抽象类中
如果继承了抽象类  那么就要继承抽象类中的所有抽象方法  除非子类也是抽象类

abstract 的另外的作用   就是如果我们一个类中也没有抽象方法  但是我们想拒绝这个类的对象  那么就可以使用abstract关键字来修饰

java中的多继承  第一种方法是通过接口来实现   也可以通过内部类也实现
注意当继承和 实现接口同时出现的时候  必须是先继承类  然后实现接口
一般来说  如果需要一个东西作为 基础类  则应该首先使用接口  只有在必须使用 方法定义 或者成员变量(不是常量) 才考虑使用抽象类
